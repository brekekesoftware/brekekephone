apply plugin: "com.android.application"

import com.android.build.OutputFile

project.ext.react = [
  entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = false
def jscFlavor = "org.webkit:android-jsc:+"
def enableHermes = false

android {
  ndkVersion rootProject.ext.ndkVersion
  compileSdkVersion rootProject.ext.compileSdkVersion

  lintOptions {
    checkReleaseBuilds false
    abortOnError false
  }

  signingConfigs {
    release {
      storeFile file("../keystores/release.keystore")
      storePassword "my-release-keyPw"
      keyAlias "my-key-alias"
      keyPassword "my-release-keyPw"
    }
  }

  defaultConfig {
    applicationId "com.brekeke.phonedev"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    multiDexEnabled true
    versionCode 211010
    versionName "2.11.10"
  }

  splits {
    abi {
      reset()
      enable enableSeparateBuildPerCPUArchitecture
      universalApk false // If true, also generate a universal APK
      include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
    }
  }

  buildTypes {
    release {
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      signingConfig signingConfigs.release
      // debuggable true
    }
  }

  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def versionCodes = ["x86":1,"x86_64":2,"armeabi-v7a":3,"arm64-v8a":4]
      def abi = output.getFilter(OutputFile.ABI)
      if (abi != null) {
        output.versionCodeOverride =
          defaultConfig.versionCode * 1000 + versionCodes.get(abi)
      }
    }
  }
}

dependencies {
  implementation fileTree(dir: "libs", include: ["*.jar"])
  implementation "com.facebook.react:react-native:+"
  implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
  implementation "androidx.constraintlayout:constraintlayout:2.1.3"

  // react-native-fcm
  implementation "com.google.firebase:firebase-core:$firebaseCoreVersion"
  implementation "com.google.firebase:firebase-messaging:$firebaseMessagingVersion"
  implementation "me.leolin:ShortcutBadger:1.1.17@aar"
  implementation "com.android.support:support-core-utils:28.0.0"

  // custom lib to display avatar in PN screen
  implementation "androidx.cardview:cardview:1.0.0"
  implementation "com.github.bumptech.glide:glide:4.11.0"
  annotationProcessor "com.github.bumptech.glide:compiler:4.11.0"

  debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
    exclude group:"com.facebook.fbjni"
  }
  debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
    exclude group:"com.facebook.flipper"
    exclude group:"com.squareup.okhttp3", module:"okhttp"
  }
  debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
    exclude group:"com.facebook.flipper"
  }

  if (enableHermes) {
    def hermesPath = "../../node_modules/hermes-engine/android/"
    debugImplementation files(hermesPath + "hermes-debug.aar")
    releaseImplementation files(hermesPath + "hermes-release.aar")
  } else {
    implementation jscFlavor
  }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

// react-native-fcm
apply plugin: "com.google.gms.google-services"

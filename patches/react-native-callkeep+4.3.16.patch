diff --git a/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/RNCallKeepModule.java b/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/RNCallKeepModule.java
index 025480a..7a041fa 100644
--- a/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/RNCallKeepModule.java
+++ b/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/RNCallKeepModule.java
@@ -16,6 +16,8 @@
  */
 
 package io.wazo.callkeep;
+import android.os.Build.VERSION_CODES;
+import androidx.annotation.RequiresApi;
 import com.facebook.react.bridge.LifecycleEventListener;
 import android.Manifest;
 import android.app.Activity;
@@ -52,6 +54,7 @@ import android.telephony.TelephonyManager;
 import android.telephony.TelephonyCallback;
 import android.telephony.PhoneStateListener;
 import android.util.Log;
+import android.view.WindowManager;
 
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.Dynamic;
@@ -133,6 +136,9 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
     private boolean hasListeners = false;
     private boolean hasActiveCall = false;
 
+    public static HashMap<String, Runnable> onShowIncomingCallUiCallbacks = new HashMap<String, Runnable>();
+    public static HashMap<String, Runnable> onRejectCallbacks = new HashMap<String, Runnable>();
+
     public static RNCallKeepModule getInstance(ReactApplicationContext reactContext, boolean realContext) {
         if (instance == null) {
             Log.d(TAG, "[RNCallKeepModule] getInstance : " + (reactContext == null ? "null" : "ok"));
@@ -164,10 +170,11 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
         delayedEvents = new WritableNativeArray();
     }
 
-    private boolean isSelfManaged() {
+    private static boolean isSelfManaged() {
         try {
             return Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && _settings.hasKey("selfManaged") && _settings.getBoolean("selfManaged");
         } catch (Exception e) {
+            Log.w(TAG, "[RNCallKeepModule][isSelfManaged] exception: " + e);
             return false;
         }
     }
@@ -218,8 +225,15 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
             Log.w(TAG, "[RNCallKeepModule][initializeTelecomManager] no react context found.");
             return;
         }
+        initializeTelecomManager(context);
+    }
+
+    public static void initializeTelecomManager(Context context) {
+        if (telecomManager != null) {
+            return;
+        }
         ComponentName cName = new ComponentName(context, VoiceConnectionService.class);
-        String appName = this.getApplicationName(context);
+        String appName = RNCallKeepModule.getApplicationName(context);
 
         handle = new PhoneAccountHandle(cName, appName);
         telecomManager = (TelecomManager) context.getSystemService(Context.TELECOM_SERVICE);
@@ -263,6 +277,7 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
          }
     }
 
+    @RequiresApi(api = VERSION_CODES.S)
     private class CallStateListener extends TelephonyCallback implements TelephonyCallback.CallStateListener {
 
           @Override
@@ -398,6 +413,9 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
     public void registerPhoneAccount(ReadableMap options) {
         setSettings(options);
 
+        if (telephonyManager != null) {
+            return;
+        }
         if (!isConnectionServiceAvailable()) {
             Log.w(TAG, "[RNCallKeepModule] registerPhoneAccount ignored due to no ConnectionService");
             return;
@@ -449,8 +467,11 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
             Log.w(TAG, "[RNCallKeepModule] displayIncomingCall ignored due to no ConnectionService or no phone account");
             return;
         }
+        this.staticDisplayIncomingCall(uuid, number, callerName, hasVideo, payload);
+    }
 
-        Log.d(TAG, "[RNCallKeepModule] displayIncomingCall, uuid: " + uuid + ", number: " + number + ", callerName: " + callerName + ", hasVideo: " + hasVideo + ", payload: " + payload);
+    public static void staticDisplayIncomingCall(String uuid, String number, String callerName, boolean hasVideo, @Nullable Bundle payload) {
+        Log.d(TAG, "[RNCallKeepModule] displayIncomingCall, uuid: " + uuid + ", number: " + number + ", callerName: " + callerName + ", hasVideo: " + hasVideo);
 
         Bundle extras = new Bundle();
         Uri uri = Uri.fromParts(PhoneAccount.SCHEME_TEL, number, null);
@@ -462,7 +483,9 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
         if (payload != null) {
             extras.putBundle(EXTRA_PAYLOAD, payload);
         }
-        this.listenToNativeCallsState();
+        if (RNCallKeepModule.instance != null) {
+        RNCallKeepModule.instance.listenToNativeCallsState();
+        }
         telecomManager.addNewIncomingCall(handle, extras);
     }
 
@@ -517,7 +540,21 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
         extras.putParcelable(TelecomManager.EXTRA_OUTGOING_CALL_EXTRAS, callExtras);
 
         Log.d(TAG, "[RNCallKeepModule] startCall, uuid: " + uuid);
-        this.listenToNativeCallsState();
+
+        if (RNCallKeepModule.instance != null) {
+            RNCallKeepModule.instance.listenToNativeCallsState();
+        }
+
+        if (ActivityCompat.checkSelfPermission(this.getAppContext(), Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {
+            // TODO: Consider calling
+            //    ActivityCompat#requestPermissions
+            // here to request the missing permissions, and then overriding
+            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
+            //                                          int[] grantResults)
+            // to handle the case where the user grants the permission. See the documentation
+            // for ActivityCompat#requestPermissions for more details.
+            return;
+        }
         telecomManager.placeCall(uri, extras);
     }
 
@@ -528,18 +565,30 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
            Log.w(TAG, "[RNCallKeepModule] endCall ignored due to no ConnectionService or no phone account");
             return;
         }
+        staticEndCall(uuid, this.getAppContext());
+    }
 
+    public static void staticEndCall(String uuid, Context context) {
+        try {
         Connection conn = VoiceConnectionService.getConnection(uuid);
         if (conn == null) {
             Log.w(TAG, "[RNCallKeepModule] endCall ignored because no connection found, uuid: " + uuid);
             return;
         }
-        Context context = this.getAppContext();
         AudioManager audioManager = (AudioManager) context.getSystemService(context.AUDIO_SERVICE);
         audioManager.setMode(0);
         conn.onDisconnect();
-        this.stopListenToNativeCallsState();
-        this.hasActiveCall = false;
+
+        if(RNCallKeepModule.instance != null) {
+            // If we are ending the call, we should stop listening to native calls state
+            RNCallKeepModule.instance.stopListenToNativeCallsState();
+            RNCallKeepModule.instance.hasActiveCall = false;
+        }
+
+        } catch (Exception e) {
+            Log.w(TAG, "[RNCallKeepModule][staticEndCall] exception: " + e);
+        }
+
         Log.d(TAG, "[RNCallKeepModule] endCall executed, uuid: " + uuid);
     }
 
@@ -551,14 +600,23 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
             return;
         }
 
+        try {
         ArrayList<Map.Entry<String, VoiceConnection>> connections =
             new ArrayList<Map.Entry<String, VoiceConnection>>(VoiceConnectionService.currentConnections.entrySet());
         for (Map.Entry<String, VoiceConnection> connectionEntry : connections) {
+            try {
             Connection connectionToEnd = connectionEntry.getValue();
             connectionToEnd.onDisconnect();
+            } catch (Exception e) {
+                Log.w(TAG, "[RNCallKeepModule][connectionToEnd.onDisconnect] exception: " + e);
+            }
         }
         this.stopListenToNativeCallsState();
         this.hasActiveCall = false;
+        } catch (Exception e) {
+            Log.w(TAG, "[RNCallKeepModule] [currentConnections.entrySet] exception: " + e);
+        }
+
         Log.d(TAG, "[RNCallKeepModule] endAllCalls executed");
     }
 
@@ -594,7 +652,7 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
                allPermissionaw.pushString(allPermission);
             }
 
-            this.reactContext
+            getReactApplicationContext()
                 .getNativeModule(PermissionsModule.class)
                 .requestMultiplePermissions(allPermissionaw, new Promise() {
                     @Override
@@ -679,6 +737,16 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
         }
 
         boolean hasSim = telephonyManager.getSimState() != TelephonyManager.SIM_STATE_ABSENT;
+        if (ActivityCompat.checkSelfPermission(this.getAppContext(), Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
+            // TODO: Consider calling
+            //    ActivityCompat#requestPermissions
+            // here to request the missing permissions, and then overriding
+            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
+            //                                          int[] grantResults)
+            // to handle the case where the user grants the permission. See the documentation
+            // for ActivityCompat#requestPermissions for more details.
+            return;
+        }
         boolean hasDefaultAccount = telecomManager.getDefaultOutgoingPhoneAccount("tel") != null;
 
         promise.resolve(!hasSim || hasDefaultAccount);
@@ -746,17 +814,21 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
            Log.w(TAG, "[RNCallKeepModule] onHostDestroy ignored due to no ConnectionService or no phone account");
            return;
        }
-
-       ArrayList<Map.Entry<String, VoiceConnection>> connections =
-           new ArrayList<Map.Entry<String, VoiceConnection>>(VoiceConnectionService.currentConnections.entrySet());
-       for (Map.Entry<String, VoiceConnection> connectionEntry : connections) {
-           Connection connectionToEnd = connectionEntry.getValue();
-           connectionToEnd.onDisconnect();
-       }
+      // In the case of multiple calls, do not end all calls if the mainActivity is destroyed.
+      // Keep the old logic
+      //  ArrayList<Map.Entry<String, VoiceConnection>> connections =
+      //      new ArrayList<Map.Entry<String, VoiceConnection>>(VoiceConnectionService.currentConnections.entrySet());
+      //  for (Map.Entry<String, VoiceConnection> connectionEntry : connections) {
+      //      Connection connectionToEnd = connectionEntry.getValue();
+      //      connectionToEnd.onDisconnect();
+      //  }
        this.stopListenToNativeCallsState();
        Log.d(TAG, "[RNCallKeepModule] onHostDestroy executed");
-       // This line will kill the android process after ending all calls
-       android.os.Process.killProcess(android.os.Process.myPid());
+
+      // Doing this will stop all other services of the application. Therefore, should not be used killProcess.
+      // Call cleanup has already been handled in IncomingCallActivity and Callkeep.ts
+      //  android.os.Process.killProcess(android.os.Process.myPid());
+      
    }
 
     @ReactMethod
@@ -856,6 +928,7 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
             conn.setAudioRoute(CallAudioState.ROUTE_WIRED_OR_EARPIECE);
             promise.resolve(true);
         } catch (Exception e) {
+            Log.w(TAG, "[RNCallKeepModule][setAudioRoute] exception: " + e);
             promise.reject("SetAudioRoute", e.getMessage());
         }
     }
@@ -889,6 +962,7 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
             }
             promise.resolve(devices);
         } catch(Exception e) {
+            Log.w(TAG, "[RNCallKeepModule][getAudioRoutes] exception: " + e);
             promise.reject("GetAudioRoutes Error", e.getMessage());
         }
     }
@@ -1113,22 +1187,20 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
         return this.reactContext.getCurrentActivity();
     }
 
-    private void registerPhoneAccount(Context appContext) {
+    public static void registerPhoneAccount(Context appContext) {
         if (!isConnectionServiceAvailable()) {
             Log.w(TAG, "[RNCallKeepModule] registerPhoneAccount ignored due to no ConnectionService");
             return;
         }
 
-        this.initializeTelecomManager();
-        Context context = this.getAppContext();
-        if (context == null) {
-            Log.w(TAG, "[RNCallKeepModule][registerPhoneAccount] no react context found.");
+        if (telephonyManager != null) {
             return;
         }
-        String appName = this.getApplicationName(context);
-
+        RNCallKeepModule.initializeTelecomManager(appContext);
+        String appName = RNCallKeepModule.getApplicationName(appContext);
+        Log.w(TAG, "[RNCallKeepModule][registerPhoneAccount]::"+ appContext.getApplicationContext().toString());
         PhoneAccount.Builder builder = new PhoneAccount.Builder(handle, appName);
-        if (isSelfManaged()) {
+        if (_settings == null || isSelfManaged()) {
             builder.setCapabilities(PhoneAccount.CAPABILITY_SELF_MANAGED);
         }
         else {
@@ -1143,7 +1215,7 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
 
         PhoneAccount account = builder.build();
 
-        telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
+        telephonyManager = (TelephonyManager) appContext.getSystemService(Context.TELEPHONY_SERVICE);
 
         telecomManager.registerPhoneAccount(account);
     }
@@ -1166,7 +1238,7 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
         }
     }
 
-    private String getApplicationName(Context appContext) {
+    private static String getApplicationName(Context appContext) {
         ApplicationInfo applicationInfo = appContext.getApplicationInfo();
         int stringId = applicationInfo.labelRes;
 
@@ -1276,6 +1348,7 @@ public class RNCallKeepModule extends ReactContextBaseJavaModule implements Life
                 _settings = MapUtils.convertJsonToMap(jsonObject);
             }
         } catch(JSONException e) {
+            Log.w(TAG, "[RNCallKeepModule][fetchStoredSettings] exception: " + e);
         }
     }
 
diff --git a/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/VoiceConnection.java b/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/VoiceConnection.java
index 1ea76fb..675b7ae 100644
--- a/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/VoiceConnection.java
+++ b/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/VoiceConnection.java
@@ -320,11 +320,35 @@ public class VoiceConnection extends Connection {
         }
         rejected = true;
 
+        String uuid = handle.get(EXTRA_CALL_UUID);
+        if (RNCallKeepModule.onRejectCallbacks.containsKey(uuid)) {
+            try {
+                RNCallKeepModule.onRejectCallbacks.get(uuid).run();
+            } catch (Exception e) {
+                Log.e(TAG, "onRejectCallbacks.get(uuid).run(): " + e);
+                e.printStackTrace();
+            }
+            try {
+                RNCallKeepModule.onRejectCallbacks.remove(uuid);
+            } catch (Exception e) {
+                Log.e(TAG, "onRejectCallbacks.remove: " + e);
+                e.printStackTrace();
+            }
+            try {
+                RNCallKeepModule.onShowIncomingCallUiCallbacks.remove(uuid);
+            } catch (Exception e) {
+                Log.e(TAG, "onShowIncomingCallUiCallbacks.remove: " + e);
+                e.printStackTrace();
+            }
+        } else {
+            Log.e(TAG, "onRejectCallbacks.get(uuid).run(): runnable not found for " + uuid);
+        }
+
         setDisconnected(new DisconnectCause(DisconnectCause.REJECTED));
         sendCallRequestToActivity(ACTION_END_CALL, handle);
         Log.d(TAG, "[VoiceConnection] onReject executed");
         try {
-            ((VoiceConnectionService) context).deinitConnection(handle.get(EXTRA_CALL_UUID));
+            ((VoiceConnectionService) context).deinitConnection(uuid);
         } catch(Throwable exception) {
             Log.e(TAG, "[VoiceConnection] onReject, handle map error", exception);
         }
@@ -333,6 +357,23 @@ public class VoiceConnection extends Connection {
 
     @Override
     public void onShowIncomingCallUi() {
+      String uuid = handle.get(EXTRA_CALL_UUID);
+        if (RNCallKeepModule.onShowIncomingCallUiCallbacks.containsKey(uuid)) {
+            try {
+                RNCallKeepModule.onShowIncomingCallUiCallbacks.get(uuid).run();
+            } catch (Exception e) {
+                Log.e(TAG, "onShowIncomingCallUiCallbacks.get(uuid).run(): " + e);
+                e.printStackTrace();
+            }
+            try {
+                RNCallKeepModule.onShowIncomingCallUiCallbacks.remove(uuid);
+            } catch (Exception e) {
+                Log.e(TAG, "onShowIncomingCallUiCallbacks.remove: " + e);
+                e.printStackTrace();
+            }
+        } else {
+            Log.e(TAG, "onShowIncomingCallUiCallbacks.get(uuid).run(): runnable not found for " + uuid);
+        }
         Log.d(TAG, "[VoiceConnection] onShowIncomingCallUi");
         sendCallRequestToActivity(ACTION_SHOW_INCOMING_CALL_UI, handle);
     }
diff --git a/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/VoiceConnectionService.java b/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/VoiceConnectionService.java
index 5d58692..e84073b 100644
--- a/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/VoiceConnectionService.java
+++ b/node_modules/react-native-callkeep/android/src/main/java/io/wazo/callkeep/VoiceConnectionService.java
@@ -25,6 +25,7 @@ import android.app.NotificationChannel;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.app.Activity;
+import android.content.pm.PackageManager;
 import android.content.res.Resources;
 import android.content.Intent;
 import android.content.Context;
@@ -51,6 +52,8 @@ import android.util.Log;
 import com.facebook.react.HeadlessJsTaskService;
 import com.facebook.react.bridge.ReadableMap;
 import com.facebook.react.bridge.WritableMap;
+import com.facebook.react.bridge.WritableNativeArray;
+import com.facebook.react.bridge.WritableNativeMap;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -122,6 +125,22 @@ public class VoiceConnectionService extends ConnectionService {
 
     public static WritableMap getSettings(@Nullable Context context) {
        WritableMap settings = RNCallKeepModule.getSettings(context);
+        if (settings == null) {
+            settings = new WritableNativeMap();
+        }
+        settings.putString("alertTitle", "Permissions required");
+        settings.putString("alertDescription", "Brekeke Phone needs to your permission to display calls");
+        settings.putString("cancelButton", "Cancel");
+        settings.putString("okButton", "OK");
+        settings.putString("imageName", "phone_account_icon");
+        settings.putArray("additionalPermissions", new WritableNativeArray());
+        settings.putBoolean("selfManaged", true);
+        WritableMap foregroundService = new WritableNativeMap();
+        foregroundService.putString("channelId", "com.brekeke.phone");
+        foregroundService.putString("channelName", "Foreground service for Brekeke Phone");
+        foregroundService.putString("notificationTitle", "Brekeke Phone is running on background");
+        foregroundService.putString("notificationIcon", "ic_launcher");
+        settings.putMap("foregroundService", foregroundService);
        return settings;
     }
 
@@ -319,15 +338,16 @@ public class VoiceConnectionService extends ConnectionService {
             .setPriority(NotificationManager.IMPORTANCE_MIN)
             .setCategory(Notification.CATEGORY_SERVICE);
 
-        Activity currentActivity = RNCallKeepModule.instance.getCurrentReactActivity();
-        if (currentActivity != null) {
-            Intent notificationIntent = new Intent(this, currentActivity.getClass());
-            notificationIntent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
-
-            final int flag =  Build.VERSION.SDK_INT >= Build.VERSION_CODES.M ? PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE : PendingIntent.FLAG_UPDATE_CURRENT;
-
-            PendingIntent pendingIntent = PendingIntent.getActivity(this, NOTIFICATION_ID, notificationIntent, flag);
-
+        // Get launch activity from package manager
+        PackageManager pm = getPackageManager();
+        Intent launchIntent = pm.getLaunchIntentForPackage(getPackageName());
+        if (launchIntent != null) {
+            launchIntent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
+            final int flag = Build.VERSION.SDK_INT >= Build.VERSION_CODES.M ?
+             PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE :
+             PendingIntent.FLAG_UPDATE_CURRENT;
+            PendingIntent pendingIntent = PendingIntent.getActivity(this, NOTIFICATION_ID,
+             launchIntent, flag);
             notificationBuilder.setContentIntent(pendingIntent);
         }
 
@@ -358,6 +378,13 @@ public class VoiceConnectionService extends ConnectionService {
             return;
         }
 
+        // Fix multiple voice connection service, when more than 1 connection service is running
+        // don't stop foreground service to avoid issue no-voice (permission for microphone ) on Android 13 and above
+        if (currentConnections.size() > 1 && Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
+            Log.d(TAG, "[VoiceConnectionService] Skip stop foreground service due to multiple active connections on Android 13+");
+            return;
+        }
+
         try {
             stopForeground(FOREGROUND_SERVICE_TYPE_MICROPHONE);
         } catch (Exception e) {
diff --git a/node_modules/react-native-callkeep/index.d.ts b/node_modules/react-native-callkeep/index.d.ts
index 25b43da..0a9528a 100644
--- a/node_modules/react-native-callkeep/index.d.ts
+++ b/node_modules/react-native-callkeep/index.d.ts
@@ -25,7 +25,7 @@ declare module 'react-native-callkeep' {
 
   export type Events = keyof NativeEvents;
   export type EventsPayload = {
-    didReceiveStartCallAction: { handle: string, callUUID?: string, name?: string };
+    didReceiveStartCallAction: { handle: string, callUUID?: string, name?: string, video?: boolean };
     answerCall: { callUUID: string };
     endCall: { callUUID: string };
     didActivateAudioSession: undefined;
@@ -66,43 +66,7 @@ declare module 'react-native-callkeep' {
     selected?: boolean
   }
 
-  export enum AudioSessionCategoryOption {
-    mixWithOthers = 0x1,
-    duckOthers = 0x2,
-    interruptSpokenAudioAndMixWithOthers = 0x11,
-    allowBluetooth = 0x4,
-    allowBluetoothA2DP = 0x20,
-    allowAirPlay = 0x40,
-    defaultToSpeaker = 0x8,
-    overrideMutedMicrophoneInterruption = 0x80,
-  }
-
-  export enum AudioSessionMode {
-    default = 'AVAudioSessionModeDefault',
-    gameChat = 'AVAudioSessionModeGameChat',
-    measurement = 'AVAudioSessionModeMeasurement',
-    moviePlayback = 'AVAudioSessionModeMoviePlayback',
-    spokenAudio = 'AVAudioSessionModeSpokenAudio',
-    videoChat = 'AVAudioSessionModeVideoChat',
-    videoRecording = 'AVAudioSessionModeVideoRecording',
-    voiceChat = 'AVAudioSessionModeVoiceChat',
-    voicePrompt = 'AVAudioSessionModeVoicePrompt',
-  }
-
   interface IOptions {
-    ios: {
-      appName: string,
-      imageName?: string,
-      supportsVideo?: boolean,
-      maximumCallGroups?: string,
-      maximumCallsPerCallGroup?: string,
-      ringtoneSound?: string,
-      includesCallsInRecents?: boolean
-      audioSession?: {
-        categoryOptions?: AudioSessionCategoryOption | number,
-        mode?: AudioSessionMode | string,
-      }
-    },
     android: {
       alertTitle: string,
       alertDescription: string,
diff --git a/node_modules/react-native-callkeep/index.js b/node_modules/react-native-callkeep/index.js
index a011f67..0531026 100644
--- a/node_modules/react-native-callkeep/index.js
+++ b/node_modules/react-native-callkeep/index.js
@@ -94,12 +94,7 @@ class RNCallKeep {
     if (!isIOS) {
       return this._setupAndroid(options.android);
     }
-
-    return this._setupIOS(options.ios);
   };
-
-  setSettings = (settings) => RNCallKeepModule.setSettings(settings[isIOS ? 'ios' : 'android']);
-
   registerPhoneAccount = (options) => {
     if (isIOS) {
       return;
@@ -324,18 +319,6 @@ class RNCallKeep {
       : Promise.reject('RNCallKeep.reportUpdatedCall was called from unsupported OS');
   };
 
-  _setupIOS = async (options) =>
-    new Promise((resolve, reject) => {
-      if (!options.appName) {
-        reject('RNCallKeep.setup: option "appName" is required');
-      }
-      if (typeof options.appName !== 'string') {
-        reject('RNCallKeep.setup: option "appName" should be of type "string"');
-      }
-
-      resolve(RNCallKeepModule.setup(options));
-    });
-
   _setupAndroid = async (options) => {
     RNCallKeepModule.setup(options);
 
diff --git a/node_modules/react-native-callkeep/ios/RNCallKeep/RNCallKeep.h b/node_modules/react-native-callkeep/ios/RNCallKeep/RNCallKeep.h
index c8e7bbd..052f0ac 100644
--- a/node_modules/react-native-callkeep/ios/RNCallKeep/RNCallKeep.h
+++ b/node_modules/react-native-callkeep/ios/RNCallKeep/RNCallKeep.h
@@ -25,7 +25,7 @@
 
 + (BOOL)application:(UIApplication *)application
 continueUserActivity:(NSUserActivity *)userActivity
-  restorationHandler:(void(^)(NSArray * __nullable restorableObjects))restorationHandler;
+ restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> *_Nullable))restorationHandler;
 
 + (void)reportNewIncomingCall:(NSString *)uuidString
                        handle:(NSString *)handle
diff --git a/node_modules/react-native-callkeep/ios/RNCallKeep/RNCallKeep.m b/node_modules/react-native-callkeep/ios/RNCallKeep/RNCallKeep.m
index 786045f..d7fa591 100644
--- a/node_modules/react-native-callkeep/ios/RNCallKeep/RNCallKeep.m
+++ b/node_modules/react-native-callkeep/ios/RNCallKeep/RNCallKeep.m
@@ -47,7 +47,6 @@ @implementation RNCallKeep
     NSMutableArray *_delayedEvents;
 }
 
-static bool isSetupNatively;
 static CXProvider* sharedProvider;
 
 // should initialise in AppDelegate.m
@@ -59,6 +58,7 @@ - (instancetype)init
     NSLog(@"[RNCallKeep][init]");
 #endif
     if (self = [super init]) {
+        _version = [[NSProcessInfo processInfo] operatingSystemVersion];
         _isStartCallActionEventListenerAdded = NO;
         _isReachable = NO;
         if (_delayedEvents == nil) _delayedEvents = [NSMutableArray array];
@@ -171,24 +171,22 @@ - (void)sendEventWithNameWrapper:(NSString *)name body:(id)body {
             body, @"data",
             nil
         ];
+        if (_delayedEvents == nil) _delayedEvents = [NSMutableArray array];
         [_delayedEvents addObject:dictionary];
     }
 }
 
-+ (NSDictionary *) getSettings {
-    return [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"RNCallKeepSettings"];
-}
-
 + (void)initCallKitProvider {
+#ifdef DEBUG
+    NSLog(@"[RNCallKeep][initCallKitProvider]");
+#endif
     if (sharedProvider == nil) {
-        NSDictionary *settings = [self getSettings];
-        if (settings != nil) {
-            sharedProvider = [[CXProvider alloc] initWithConfiguration:[RNCallKeep getProviderConfiguration:settings]];
-        }
+        sharedProvider = [[CXProvider alloc] initWithConfiguration:[RNCallKeep getProviderConfiguration]];
     }
 }
 
 + (NSString *) getAudioOutput {
+    // fix issue: index 0 beyond bounds for empty array 
     @try{
         NSArray<AVAudioSessionPortDescription *>* outputs = [AVAudioSession sharedInstance].currentRoute.outputs;
         if(outputs != nil && outputs.count > 0){
@@ -197,52 +194,9 @@ + (NSString *) getAudioOutput {
     } @catch(NSException* error) {
         NSLog(@"getAudioOutput error :%@", [error description]);
     }
-
     return nil;
 }
 
-+ (void)setup:(NSDictionary *)options {
-    RNCallKeep *callKeep = [RNCallKeep allocWithZone: nil];
-    [callKeep setup:options];
-    isSetupNatively = YES;
-}
-
-RCT_EXPORT_METHOD(setup:(NSDictionary *)options)
-{
-    if (isSetupNatively) {
-#ifdef DEBUG
-        NSLog(@"[RNCallKeep][setup] already setup");
-        RCTLog(@"[RNCallKeep][setup] already setup in native code");
-#endif
-        return;
-    }
-
-#ifdef DEBUG
-    NSLog(@"[RNCallKeep][setup] options = %@", options);
-#endif
-    _version = [[[NSProcessInfo alloc] init] operatingSystemVersion];
-    self.callKeepCallController = [[CXCallController alloc] init];
-
-    [self setSettings: options];
-
-    [RNCallKeep initCallKitProvider];
-
-    self.callKeepProvider = sharedProvider;
-    [self.callKeepProvider setDelegate:self queue:nil];
-}
-
-RCT_EXPORT_METHOD(setSettings:(NSDictionary *)options)
-{
-#ifdef DEBUG
-    NSLog(@"[RNCallKeep][setSettings] options = %@", options);
-#endif
-    NSDictionary *settings = [[NSMutableDictionary alloc] initWithDictionary:options];
-
-    // Store settings in NSUserDefault
-    [[NSUserDefaults standardUserDefaults] setObject:settings forKey:@"RNCallKeepSettings"];
-    [[NSUserDefaults standardUserDefaults] synchronize];
-}
-
 RCT_EXPORT_METHOD(setReachable)
 {
 #ifdef DEBUG
@@ -297,21 +251,6 @@ + (void)setup:(NSDictionary *)options {
                           fromPushKit: NO
                               payload: nil
                 withCompletionHandler: nil];
-
-    NSDictionary *settings = [RNCallKeep getSettings];
-    NSNumber *timeout = settings[@"displayCallReachabilityTimeout"];
-
-    if (timeout) {
-        dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)([timeout intValue] * NSEC_PER_MSEC));
-        dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
-            if (!self->_isReachable) {
-#ifdef DEBUG
-                NSLog(@"[RNCallKeep]Displayed a call without a reachable app, ending the call: %@", uuidString);
-#endif
-                [RNCallKeep endCallWithUUID: uuidString reason: 1];
-            }
-        });
-    }
 }
 
 RCT_EXPORT_METHOD(getInitialEvents:(RCTPromiseResolveBlock)resolve
@@ -339,7 +278,13 @@ + (void)setup:(NSDictionary *)options {
 {
 #ifdef DEBUG
     NSLog(@"[RNCallKeep][startCall] uuidString = %@", uuidString);
+    NSLog(@"[RNCallKeep][startCall] handle = %@", handle);
+    NSLog(@"[RNCallKeep][startCall] contactIdentifier = %@", contactIdentifier);
+    NSLog(@"[RNCallKeep][startCall] handleType = %@", handleType);
 #endif
+   if (self.callKeepProvider == nil) {
+      [RNCallKeep initCallKitProvider];
+    }
     int _handleType = [RNCallKeep getHandleType:handleType];
     NSUUID *uuid = [[NSUUID alloc] initWithUUIDString:uuidString];
     CXHandle *callHandle = [[CXHandle alloc] initWithType:_handleType value:handle];
@@ -651,17 +596,22 @@ + (NSString *) getAudioInputType: (NSString *) type
 
 + (NSString *) getSelectedAudioRoute
 {
-    AVAudioSession* myAudioSession = [AVAudioSession sharedInstance];
-    AVAudioSessionRouteDescription *currentRoute = [myAudioSession currentRoute];
-    NSArray *selectedOutputs = currentRoute.outputs;
-
-    AVAudioSessionPortDescription *selectedOutput = selectedOutputs[0];
-
-    if(selectedOutput && [selectedOutput.portType isEqualToString:AVAudioSessionPortBuiltInReceiver]) {
-        return @"Phone";
+    @try {
+        AVAudioSession* myAudioSession = [AVAudioSession sharedInstance];
+        AVAudioSessionRouteDescription *currentRoute = [myAudioSession currentRoute];
+        NSArray *selectedOutputs = currentRoute.outputs;
+        // fix issue: index 0 beyond bounds for empty array
+        if (selectedOutputs != nil && selectedOutputs.count > 0) {
+            AVAudioSessionPortDescription *selectedOutput = selectedOutputs[0];
+            if (selectedOutput && [selectedOutput.portType isEqualToString:AVAudioSessionPortBuiltInReceiver]) {
+                return @"Phone";
+            }
+            return [RNCallKeep getAudioInputType:selectedOutput.portType];
+        }
+    } @catch(NSException* error) {
+        NSLog(@"getSelectedAudioRoute error :%@", [error description]);
     }
-
-    return [RNCallKeep getAudioInputType: selectedOutput.portType];
+    return nil;
 }
 
 - (void)requestTransaction:(CXTransaction *)transaction
@@ -876,37 +826,20 @@ + (int)getHandleType:(NSString *)handleType
     }
 }
 
-+ (CXProviderConfiguration *)getProviderConfiguration:(NSDictionary*)settings
++ (CXProviderConfiguration *)getProviderConfiguration
 {
 #ifdef DEBUG
     NSLog(@"[RNCallKeep][getProviderConfiguration]");
 #endif
-    CXProviderConfiguration *providerConfiguration = [[CXProviderConfiguration alloc] initWithLocalizedName:settings[@"appName"]];
-    providerConfiguration.supportsVideo = YES;
-    providerConfiguration.maximumCallGroups = 3;
-    providerConfiguration.maximumCallsPerCallGroup = 1;
-    providerConfiguration.supportedHandleTypes = [RNCallKeep getSupportedHandleTypes:settings[@"handleType"]];
-
-    if (settings[@"supportsVideo"]) {
-        providerConfiguration.supportsVideo = [settings[@"supportsVideo"] boolValue];
-    }
-    if (settings[@"maximumCallGroups"]) {
-        providerConfiguration.maximumCallGroups = [settings[@"maximumCallGroups"] integerValue];
-    }
-    if (settings[@"maximumCallsPerCallGroup"]) {
-        providerConfiguration.maximumCallsPerCallGroup = [settings[@"maximumCallsPerCallGroup"] integerValue];
-    }
-    if (settings[@"imageName"]) {
-        providerConfiguration.iconTemplateImageData = UIImagePNGRepresentation([UIImage imageNamed:settings[@"imageName"]]);
-    }
-    if (settings[@"ringtoneSound"]) {
-        providerConfiguration.ringtoneSound = settings[@"ringtoneSound"];
-    }
-    if (@available(iOS 11.0, *)) {
-        if (settings[@"includesCallsInRecents"]) {
-            providerConfiguration.includesCallsInRecents = [settings[@"includesCallsInRecents"] boolValue];
-        }
-    }
+    NSString *localizedName = @"Brekeke Phone";
+    CXProviderConfiguration *providerConfiguration = [[CXProviderConfiguration alloc] initWithLocalizedName:localizedName];
+    providerConfiguration.supportedHandleTypes = [RNCallKeep getSupportedHandleTypes:@"generic"];
+    providerConfiguration.supportsVideo = NO;
+    providerConfiguration.maximumCallGroups = 99;
+    providerConfiguration.maximumCallsPerCallGroup = 99;
+    providerConfiguration.iconTemplateImageData = UIImagePNGRepresentation([UIImage imageNamed:@"callkit.png"]);
+    providerConfiguration.ringtoneSound = @"incallmanager_ringtone.mp3";
+    providerConfiguration.includesCallsInRecents = NO;
     return providerConfiguration;
 }
 
@@ -915,31 +849,25 @@ - (void)configureAudioSession
 #ifdef DEBUG
     NSLog(@"[RNCallKeep][configureAudioSession] Activating audio session");
 #endif
-
-    NSUInteger categoryOptions = AVAudioSessionCategoryOptionAllowBluetooth | AVAudioSessionCategoryOptionAllowBluetoothA2DP;
-    NSString *mode = AVAudioSessionModeDefault;
-
-    NSDictionary *settings = [RNCallKeep getSettings];
-    if (settings && settings[@"audioSession"]) {
-        if (settings[@"audioSession"][@"categoryOptions"]) {
-            categoryOptions = [settings[@"audioSession"][@"categoryOptions"] integerValue];
-        }
-
-        if (settings[@"audioSession"][@"mode"]) {
-            mode = settings[@"audioSession"][@"mode"];
-        }
-    }
-
     AVAudioSession* audioSession = [AVAudioSession sharedInstance];
-    [audioSession setCategory:AVAudioSessionCategoryPlayAndRecord withOptions:categoryOptions error:nil];
+    NSString *currentCategory = audioSession.category;
+    AVAudioSessionCategoryOptions currentOptions = audioSession.categoryOptions;
+    AVAudioSessionCategoryOptions desiredOptions = AVAudioSessionCategoryOptionAllowBluetooth | AVAudioSessionCategoryOptionAllowBluetoothA2DP | AVAudioSessionCategoryOptionDuckOthers | AVAudioSessionCategoryOptionMixWithOthers;
 
-    [audioSession setMode:mode error:nil];
+    BOOL categoryMatches = [currentCategory isEqualToString:AVAudioSessionCategoryPlayAndRecord];
+    if (!categoryMatches) {
+        NSLog(@"[RNCallKeep][configureAudioSession] Setting category and options");
+        [audioSession setCategory:AVAudioSessionCategoryPlayAndRecord withOptions:desiredOptions error:nil];
+        [audioSession setMode:AVAudioSessionModeDefault error:nil];
             
-    double sampleRate = 44100.0;
-    [audioSession setPreferredSampleRate:sampleRate error:nil];
+        double sampleRate = 44100.0;
+        [audioSession setPreferredSampleRate:sampleRate error:nil];
             
-    NSTimeInterval bufferDuration = .005;
-    [audioSession setPreferredIOBufferDuration:bufferDuration error:nil];
+        NSTimeInterval bufferDuration = .005;
+        [audioSession setPreferredIOBufferDuration:bufferDuration error:nil];
+    } else {
+        NSLog(@"[RNCallKeep][configureAudioSession] Category and options already correct, only activating");
+    }
     [audioSession setActive:TRUE error:nil];
 }
 
@@ -969,7 +897,7 @@ + (BOOL)application:(UIApplication *)application
 
 + (BOOL)application:(UIApplication *)application
 continueUserActivity:(NSUserActivity *)userActivity
- restorationHandler:(void(^)(NSArray * __nullable restorableObjects))restorationHandler
+ restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> *_Nullable))restorationHandler;
 {
 #ifdef DEBUG
     NSLog(@"[RNCallKeep][application:continueUserActivity]");
